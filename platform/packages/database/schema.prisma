// This is your Prisma schema file
// Multi-tenant eCommerce + CRM + ERP

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY & AUTH
// ============================================

model Tenant {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  domain        String?  @unique
  plan          Plan     @default(EMPRENDEDOR)
  status        TenantStatus @default(TRIAL)
  config        Json     @default("{}")
  
  // Branding
  logo          String?
  primaryColor  String   @default("#10b981")
  secondaryColor String  @default("#f59e0b")
  
  // Billing
  billingEmail  String?
  billingCycle  BillingCycle @default(ANNUAL)
  nextPayment   DateTime?
  
  // Relations
  users         User[]
  products      Product[]
  categories    Category[]
  orders        Order[]
  customers     Customer[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([slug])
  @@index([status])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          UserRole @default(ADMIN)
  
  // Multi-tenant
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  
  // CRM - For vendors
  isVendor      Boolean  @default(false)
  commissionRate Float?  // Percentage
  leads         Lead[]
  sales         Sale[]
  
  // Sessions
  sessions      Session[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([email])
  @@index([tenantId])
}

// ============================================
// ECOMMERCE
// ============================================

model Product {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  name          String
  slug          String
  description   String?  @db.Text
  
  // Pricing
  price         Decimal  @db.Decimal(10, 2)
  salePrice     Decimal? @db.Decimal(10, 2)
  cost          Decimal? @db.Decimal(10, 2)
  
  // Inventory
  sku           String?
  barcode       String?
  stock         Int      @default(0)
  stockMin      Int      @default(5)
  trackStock    Boolean  @default(true)
  
  // Relations
  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  
  // Media & Attributes
  images        Json     @default("[]")
  attributes    Json     @default("{}")
  
  // SEO
  metaTitle     String?
  metaDescription String? @db.Text
  
  // Status
  status        ProductStatus @default(DRAFT)
  featured      Boolean  @default(false)
  
  // Relations
  orderItems    OrderItem[]
  movements     InventoryMovement[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, slug])
  @@index([tenantId, status])
  @@index([categoryId])
}

model Category {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  name          String
  slug          String
  description   String?
  image         String?
  
  parentId      String?
  parent        Category? @relation("CategoryTree", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryTree")
  
  products      Product[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, slug])
  @@index([tenantId])
}

model Customer {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  email         String
  name          String
  phone         String?
  
  // Argentina specific
  dni           String?
  cuit          String?
  
  // Address
  address       Json?
  
  // Relations
  orders        Order[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, email])
  @@index([tenantId])
}

model Order {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  orderNumber   Int      @default(autoincrement())
  
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  
  // Contact info (for guest checkout)
  email         String
  name          String
  phone         String?
  
  // Amounts
  subtotal      Decimal  @db.Decimal(10, 2)
  discount      Decimal  @default(0) @db.Decimal(10, 2)
  shipping      Decimal  @default(0) @db.Decimal(10, 2)
  tax           Decimal  @default(0) @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  
  // Payment
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?  // MercadoPago payment ID
  
  // Shipping
  shippingAddress Json
  shippingMethod String?
  trackingCode  String?
  
  // Status
  status        OrderStatus @default(PENDING)
  
  // Relations
  items         OrderItem[]
  
  // Notes
  customerNotes String?  @db.Text
  adminNotes    String?  @db.Text
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([tenantId, status])
  @@index([customerId])
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  
  name          String   // Snapshot of product name
  price         Decimal  @db.Decimal(10, 2) // Snapshot of price
  quantity      Int
  total         Decimal  @db.Decimal(10, 2)
  
  createdAt     DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
}

// ============================================
// CRM
// ============================================

model Lead {
  id            String   @id @default(cuid())
  vendorId      String
  vendor        User     @relation(fields: [vendorId], references: [id])
  
  // Business info
  businessName  String
  contactName   String
  email         String
  phone         String
  address       String?
  
  // Sales info
  plan          Plan
  status        LeadStatus @default(NEW)
  probability   Int      @default(50) // 0-100
  
  // Follow up
  notes         String?  @db.Text
  nextAction    DateTime?
  lastContact   DateTime?
  
  // If converted
  saleId        String?  @unique
  sale          Sale?    @relation(fields: [saleId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([vendorId, status])
  @@index([email])
}

model Sale {
  id            String   @id @default(cuid())
  vendorId      String
  vendor        User     @relation(fields: [vendorId], references: [id])
  
  lead          Lead?
  
  // Sale details
  plan          Plan
  amount        Decimal  @db.Decimal(10, 2)
  commission    Decimal  @db.Decimal(10, 2)
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentDate   DateTime?
  commissionPaid Boolean @default(false)
  commissionPaidDate DateTime?
  
  // Tenant created
  tenantId      String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([vendorId])
  @@index([paymentStatus])
}

// ============================================
// ERP
// ============================================

model InventoryMovement {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  
  type          MovementType
  quantity      Int
  
  // Locations (for multi-warehouse)
  fromLocation  String?
  toLocation    String?
  
  // Financial
  unitCost      Decimal? @db.Decimal(10, 2)
  totalCost     Decimal? @db.Decimal(10, 2)
  
  // Reference
  reference     String?  // Order ID, Adjustment ID, etc
  reason        String?
  
  createdBy     String?
  createdAt     DateTime @default(now())
  
  @@index([productId])
  @@index([type])
}

// ============================================
// MISC
// ============================================

model Session {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token         String   @unique
  userAgent     String?
  ip            String?
  
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

// ============================================
// ENUMS
// ============================================

enum Plan {
  EMPRENDEDOR
  COMERCIO
  EMPRESA
  MARKETPLACE
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum UserRole {
  SUPER_ADMIN  // Platform admin
  ADMIN        // Tenant admin
  MANAGER      // Store manager
  VENDOR       // Sales vendor
  SUPPORT      // Support staff
}

enum ProductStatus {
  DRAFT
  ACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  MERCADOPAGO
  TRANSFER
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum MovementType {
  PURCHASE     // Compra
  SALE         // Venta
  ADJUSTMENT   // Ajuste
  TRANSFER     // Transferencia entre depósitos
  RETURN       // Devolución
  DAMAGE       // Daño/Pérdida
}
